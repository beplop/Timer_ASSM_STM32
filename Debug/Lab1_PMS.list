
Lab1_PMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000514  0800051c  0001051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000514  08000514  0001051c  2**0
                  CONTENTS
  4 .ARM          00000000  08000514  08000514  0001051c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000514  0800051c  0001051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800051c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800051c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001051c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000001a9  00000000  00000000  00010545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000022  00000000  00000000  000106ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000012  00000000  00000000  00010710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000028  00000000  00000000  00010728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00000060  00000000  00000000  00010750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  000107b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004fc 	.word	0x080004fc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004fc 	.word	0x080004fc

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000170:	48db      	ldr	r0, [pc, #876]	; (80004e0 <delay_loop+0xa>)
  mov   sp, r0          /* set stack pointer */
 8000172:	4685      	mov	sp, r0
 ///////////////////////////////

  ldr	r2, =PERIPH_BB_BASE+ \
 8000174:	4adb      	ldr	r2, [pc, #876]	; (80004e4 <delay_loop+0xe>)
				(RCC_APB2ENR-PERIPH_BASE)*32 + \
				4*4 @ вычисляем адрес для BitBanding 4-го бита регистра RCC_APB2ENR
  mov	r3, #1@ включаем тактирование порта C (в 4-й бит RCC_APB2ENR пишем '1`)
 8000176:	f04f 0301 	mov.w	r3, #1
  str 	r3, [r2]@ загружаем это значение
 800017a:	6013      	str	r3, [r2, #0]

  ldr	r2, =GPIOC_CRL	@ адрес порта
 800017c:	4ada      	ldr	r2, [pc, #872]	; (80004e8 <delay_loop+0x12>)
  mov	r3, #0x03	@ 4-битная маска настроек для Output mode 50mHz, Push-Pull ("0011")
 800017e:	f04f 0303 	mov.w	r3, #3
  ldr	r4, [r2]
 8000182:	6814      	ldr	r4, [r2, #0]
  bfi	r4, r3, #8, #4	@ скопировать биты маски в позицию pin2
 8000184:	f363 240b 	bfi	r4, r3, #8, #4
  bfi	r4, r3, #12, #4	@ скопировать биты маски в позицию pin3
 8000188:	f363 340f 	bfi	r4, r3, #12, #4
  bfi	r4, r3, #16, #4	@ скопировать биты маски в позицию pin4
 800018c:	f363 4413 	bfi	r4, r3, #16, #4
  bfi	r4, r3, #20, #4	@ скопировать биты маски в позицию pin5
 8000190:	f363 5417 	bfi	r4, r3, #20, #4
  bfi	r4, r3, #24, #4	@ скопировать биты маски в позицию pin6
 8000194:	f363 641b 	bfi	r4, r3, #24, #4
  str	r4, [r2]	@ загрузить результат в регистр настройки порта
 8000198:	6014      	str	r4, [r2, #0]

  ldr	r2, =GPIOC_CRH	@ адрес порта
 800019a:	4ad4      	ldr	r2, [pc, #848]	; (80004ec <delay_loop+0x16>)
  mov	r3, #0x03	@ 4-битная маска настроек для Output mode 50mHz, Push-Pull ("0011")
 800019c:	f04f 0303 	mov.w	r3, #3
  ldr	r4, [r2]
 80001a0:	6814      	ldr	r4, [r2, #0]
  bfi	r4, r3, #0, #4	@ скопировать биты маски в позицию pin8
 80001a2:	f363 0403 	bfi	r4, r3, #0, #4
  bfi	r4, r3, #4, #4	@ скопировать биты маски в позицию pin9
 80001a6:	f363 1407 	bfi	r4, r3, #4, #4
  bfi	r4, r3, #8, #4	@ скопировать биты маски в позицию pin10
 80001aa:	f363 240b 	bfi	r4, r3, #8, #4
  bfi	r4, r3, #12, #4 @ скопировать биты маски в позицию pin11
 80001ae:	f363 340f 	bfi	r4, r3, #12, #4
  mov	r3, #0x08 @  4-битная маска настроек для Input mode с подтяжкой, Push-Pull ("1000")
 80001b2:	f04f 0308 	mov.w	r3, #8
  bfi	r4, r3, #20, #4 @ скопировать биты маски в позицию pin13 (кнопка)
 80001b6:	f363 5417 	bfi	r4, r3, #20, #4
  str	r4, [r2]	@ загрузить результат в регистр настройки порта
 80001ba:	6014      	str	r4, [r2, #0]

  ldr	r2, =GPIOC_BSRR
 80001bc:	4acc      	ldr	r2, [pc, #816]	; (80004f0 <delay_loop+0x1a>)

  ldr	r3, =GPIO_BSRR_BS13 @подтяжка пина с кнопкой к 1
 80001be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  str	r3, [r2]
 80001c2:	6013      	str	r3, [r2, #0]

  mov 	r5, #0x0
 80001c4:	f04f 0500 	mov.w	r5, #0
  mov 	r6, #0x0
 80001c8:	f04f 0600 	mov.w	r6, #0
  mov 	r7, #0x0
 80001cc:	f04f 0700 	mov.w	r7, #0

080001d0 <loop>:

  loop:
		@ вычисляем адрес для BitBanding 13-го бита регистра GPIOC_IDR
  		ldr 	r0, =(PERIPH_BB_BASE + (GPIOC_IDR - PERIPH_BASE) * 32 + 13 * 4)
 80001d0:	48c8      	ldr	r0, [pc, #800]	; (80004f4 <delay_loop+0x1e>)
		ldr		r1, [r0]
 80001d2:	6801      	ldr	r1, [r0, #0]


  		ldr		r3, =GPIO_BSRR_BS10 @ dig1 ON
 80001d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  		str		r3, [r2]
 80001d8:	6013      	str	r3, [r2, #0]
  		ldr		r3, =GPIO_BSRR_BR11 @ dig2 OFF
 80001da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  		str		r3, [r2]
 80001de:	6013      	str	r3, [r2, #0]

  		bl		digit1
 80001e0:	f000 f819 	bl	8000216 <digit1>
  		bl		delay
 80001e4:	f000 f974 	bl	80004d0 <delay>

  		ldr		r3, =GPIO_BSRR_BR10 @ dig1 OFF
 80001e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  		str		r3, [r2]
 80001ec:	6013      	str	r3, [r2, #0]
  		ldr		r3, =GPIO_BSRR_BS11 @ dig2 ON
 80001ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  		str		r3, [r2]
 80001f2:	6013      	str	r3, [r2, #0]

  		cmp		r5, #0xA
 80001f4:	2d0a      	cmp	r5, #10
  		itt		eq
 80001f6:	bf04      	itt	eq
  		moveq 	r5, #0x0
 80001f8:	2500      	moveq	r5, #0
  		addeq	r6, #0x1
 80001fa:	3601      	addeq	r6, #1

  		bl		digit2
 80001fc:	f000 f901 	bl	8000402 <digit2>
  		bl		delay
 8000200:	f000 f966 	bl	80004d0 <delay>

  		cmp		r1, #0
 8000204:	2900      	cmp	r1, #0
		beq		loop
 8000206:	d0e3      	beq.n	80001d0 <loop>

  		cmp		r7, #0x20
 8000208:	2f20      	cmp	r7, #32
  		itt		eq
 800020a:	bf04      	itt	eq
  		addeq	r5, #0x1
 800020c:	3501      	addeq	r5, #1
  		moveq 	r7, #0x0
 800020e:	2700      	moveq	r7, #0

		add		r7, #0x1
 8000210:	f107 0701 	add.w	r7, r7, #1

  		b 		loop
 8000214:	e7dc      	b.n	80001d0 <loop>

08000216 <digit1>:

  digit1:
  		push 	{r2, r3, r5, lr}
 8000216:	b52c      	push	{r2, r3, r5, lr}

  		ldr		r2, =GPIOC_BSRR
 8000218:	4ab5      	ldr	r2, [pc, #724]	; (80004f0 <delay_loop+0x1a>)

  		cmp		r5, #0
 800021a:	2d00      	cmp	r5, #0

0800021c <case0_1>:
  		case0_1:
  			bne		case1_1
 800021c:	d115      	bne.n	800024a <case1_1>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800021e:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 8000222:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 8000224:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 8000228:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 800022a:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 800022e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 8000230:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 8000234:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS6 //e
 8000236:	f04f 0340 	mov.w	r3, #64	; 0x40
  			str		r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS8 //f
 800023c:	f44f 7380 	mov.w	r3, #256	; 0x100
  			str		r3, [r2]
 8000240:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR9 //g
 8000242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  			str		r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000248:	e0d8      	b.n	80003fc <endcase>

0800024a <case1_1>:

  		case1_1:
  			cmp r5, #0x1
 800024a:	2d01      	cmp	r5, #1
  			bne		case2_1
 800024c:	d115      	bne.n	800027a <case2_1>
  			ldr		r3, =GPIO_BSRR_BR2 //a
 800024e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  			str		r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 8000254:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 8000258:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 800025a:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR5 //d
 8000260:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  			str		r3, [r2]
 8000264:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 8000266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR8 //f
 800026c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  			str		r3, [r2]
 8000270:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR9 //g
 8000272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  			str		r3, [r2]
 8000276:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000278:	e0c0      	b.n	80003fc <endcase>

0800027a <case2_1>:

  		case2_1:
  			cmp r5, #0x2
 800027a:	2d02      	cmp	r5, #2
  			bne		case3_1
 800027c:	d115      	bne.n	80002aa <case3_1>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800027e:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 8000284:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 8000288:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR4 //c
 800028a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  			str		r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 8000290:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 8000294:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS6 //e
 8000296:	f04f 0340 	mov.w	r3, #64	; 0x40
  			str		r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR8 //f
 800029c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  			str		r3, [r2]
 80002a0:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 80002a2:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 80002a6:	6013      	str	r3, [r2, #0]
  			b		endcase
 80002a8:	e0a8      	b.n	80003fc <endcase>

080002aa <case3_1>:

  		case3_1:

  			cmp r5, #0x3
 80002aa:	2d03      	cmp	r5, #3
  			bne		case4_1
 80002ac:	d115      	bne.n	80002da <case4_1>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 80002ae:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 80002b4:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 80002b8:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 80002ba:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 80002c0:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 80002c4:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 80002c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 80002ca:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR8 //f
 80002cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  			str		r3, [r2]
 80002d0:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 80002d2:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  			b		endcase
 80002d8:	e090      	b.n	80003fc <endcase>

080002da <case4_1>:

  		case4_1:
  			cmp r5, #0x4
 80002da:	2d04      	cmp	r5, #4
  			bne		case5_1
 80002dc:	d115      	bne.n	800030a <case5_1>
  			ldr		r3, =GPIO_BSRR_BR2  //a
 80002de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  			str		r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 80002e4:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 80002e8:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 80002ea:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR5 //d
 80002f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  			str		r3, [r2]
 80002f4:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 80002f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS8 //f
 80002fc:	f44f 7380 	mov.w	r3, #256	; 0x100
  			str		r3, [r2]
 8000300:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 8000302:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000308:	e078      	b.n	80003fc <endcase>

0800030a <case5_1>:

  		case5_1:
  			cmp r5, #0x5
 800030a:	2d05      	cmp	r5, #5
  			bne		case6_1
 800030c:	d115      	bne.n	800033a <case6_1>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800030e:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR3 //b
 8000314:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  			str		r3, [r2]
 8000318:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 800031a:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 8000320:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 8000324:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 8000326:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS8 //f
 800032c:	f44f 7380 	mov.w	r3, #256	; 0x100
  			str		r3, [r2]
 8000330:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 8000332:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000338:	e060      	b.n	80003fc <endcase>

0800033a <case6_1>:

  		case6_1:
  			cmp r5, #0x6
 800033a:	2d06      	cmp	r5, #6
  			bne		case7_1
 800033c:	d115      	bne.n	800036a <case7_1>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800033e:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR3 //b
 8000344:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  			str		r3, [r2]
 8000348:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 800034a:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 8000350:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 8000354:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS6 //e
 8000356:	f04f 0340 	mov.w	r3, #64	; 0x40
  			str		r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS8 //f
 800035c:	f44f 7380 	mov.w	r3, #256	; 0x100
  			str		r3, [r2]
 8000360:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 8000362:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 8000366:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000368:	e048      	b.n	80003fc <endcase>

0800036a <case7_1>:

  		case7_1:
  			cmp	r5, #0x7
 800036a:	2d07      	cmp	r5, #7
  			bne		case8_1
 800036c:	d115      	bne.n	800039a <case8_1>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800036e:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 8000372:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 8000374:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 8000378:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 800037a:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR5 //d
 8000380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  			str		r3, [r2]
 8000384:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 8000386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR8 //f
 800038c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  			str		r3, [r2]
 8000390:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR9 //g
 8000392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  			str		r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000398:	e030      	b.n	80003fc <endcase>

0800039a <case8_1>:

  		case8_1:
  			cmp	r5, #0x8
 800039a:	2d08      	cmp	r5, #8
  			bne		case9_1
 800039c:	d115      	bne.n	80003ca <case9_1>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800039e:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 80003a4:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 80003a8:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 80003aa:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 80003b0:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 80003b4:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS6 //e
 80003b6:	f04f 0340 	mov.w	r3, #64	; 0x40
  			str		r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS8 //f
 80003bc:	f44f 7380 	mov.w	r3, #256	; 0x100
  			str		r3, [r2]
 80003c0:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 80003c2:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  			b		endcase
 80003c8:	e018      	b.n	80003fc <endcase>

080003ca <case9_1>:

  		case9_1:
  			cmp	r5, #0x9
 80003ca:	2d09      	cmp	r5, #9
  			bne		default
 80003cc:	d115      	bne.n	80003fa <default>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 80003ce:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 80003d4:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 80003d8:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 80003da:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 80003e0:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 80003e4:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 80003e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS8 //f
 80003ec:	f44f 7380 	mov.w	r3, #256	; 0x100
  			str		r3, [r2]
 80003f0:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 80003f2:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  			b		endcase
 80003f8:	e000      	b.n	80003fc <endcase>

080003fa <default>:

  		default:
  			b		endcase
 80003fa:	e7ff      	b.n	80003fc <endcase>

080003fc <endcase>:

  		endcase:
  			pop		{r2, r3, r5, lr}
 80003fc:	e8bd 402c 	ldmia.w	sp!, {r2, r3, r5, lr}
  			bx	 	lr
 8000400:	4770      	bx	lr

08000402 <digit2>:

  digit2:
  		push 	{r2, r3, r5, lr}
 8000402:	b52c      	push	{r2, r3, r5, lr}

  		ldr		r2, =GPIOC_BSRR
 8000404:	4a3a      	ldr	r2, [pc, #232]	; (80004f0 <delay_loop+0x1a>)

  		cmp		r6, #0
 8000406:	2e00      	cmp	r6, #0

08000408 <case0_2>:
  		case0_2:
  			bne		case1_2
 8000408:	d115      	bne.n	8000436 <case1_2>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800040a:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 8000410:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 8000414:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 8000416:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 800041c:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 8000420:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS6 //e
 8000422:	f04f 0340 	mov.w	r3, #64	; 0x40
  			str		r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS8 //f
 8000428:	f44f 7380 	mov.w	r3, #256	; 0x100
  			str		r3, [r2]
 800042c:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR9 //g
 800042e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  			str		r3, [r2]
 8000432:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000434:	e7e2      	b.n	80003fc <endcase>

08000436 <case1_2>:

  		case1_2:
  			cmp r6, #0x1
 8000436:	2e01      	cmp	r6, #1
  			bne		case2_2
 8000438:	d115      	bne.n	8000466 <case2_2>
  			ldr		r3, =GPIO_BSRR_BR2 //a
 800043a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  			str		r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 8000440:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 8000444:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 8000446:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 800044a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR5 //d
 800044c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  			str		r3, [r2]
 8000450:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 8000452:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR8 //f
 8000458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  			str		r3, [r2]
 800045c:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR9 //g
 800045e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  			str		r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000464:	e7ca      	b.n	80003fc <endcase>

08000466 <case2_2>:

  		case2_2:
  			cmp r6, #0x2
 8000466:	2e02      	cmp	r6, #2
  			bne		case3_2
 8000468:	d115      	bne.n	8000496 <case3_2>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800046a:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 8000470:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 8000474:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR4 //c
 8000476:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  			str		r3, [r2]
 800047a:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 800047c:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 8000480:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS6 //e
 8000482:	f04f 0340 	mov.w	r3, #64	; 0x40
  			str		r3, [r2]
 8000486:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR8 //f
 8000488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  			str		r3, [r2]
 800048c:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 800048e:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  			b		endcase
 8000494:	e7b2      	b.n	80003fc <endcase>

08000496 <case3_2>:

  		case3_2:
  			cmp r6, #0x3
 8000496:	2e03      	cmp	r6, #3
  			bne		default
 8000498:	d1af      	bne.n	80003fa <default>
  			ldr		r3, =GPIO_BSRR_BS2 //a
 800049a:	f04f 0304 	mov.w	r3, #4
  			str		r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS3 //b
 80004a0:	f04f 0308 	mov.w	r3, #8
  			str		r3, [r2]
 80004a4:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS4 //c
 80004a6:	f04f 0310 	mov.w	r3, #16
  			str		r3, [r2]
 80004aa:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS5 //d
 80004ac:	f04f 0320 	mov.w	r3, #32
  			str		r3, [r2]
 80004b0:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR6 //e
 80004b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  			str		r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BR8 //f
 80004b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  			str		r3, [r2]
 80004bc:	6013      	str	r3, [r2, #0]
  			ldr		r3, =GPIO_BSRR_BS9 //g
 80004be:	f44f 7300 	mov.w	r3, #512	; 0x200
  			str		r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]

			cmp		r7, #0x20
 80004c4:	2f20      	cmp	r7, #32
  			ittt	eq
 80004c6:	bf02      	ittt	eq
  			moveq 	r5, #0x0
 80004c8:	2500      	moveq	r5, #0
 			moveq 	r6, #0x0
 80004ca:	2600      	moveq	r6, #0
 			moveq	r7, #0x0
 80004cc:	2700      	moveq	r7, #0

  			b		endcase
 80004ce:	e795      	b.n	80003fc <endcase>

080004d0 <delay>:

  delay:									@ Подпрограмма задержки
		push	{r2}						@ Загружаем в стек R0, т.к. его значение будем менять
 80004d0:	b404      	push	{r2}
		ldr		r2, =0x5555					@ псевдоинструкция Thumb (загрузить константу в регистр)
 80004d2:	f245 5255 	movw	r2, #21845	; 0x5555

080004d6 <delay_loop>:
  	delay_loop:
		subs	r2, #1						@ SUB с установкой флагов результата
 80004d6:	3a01      	subs	r2, #1
		it 		NE
 80004d8:	bf18      	it	ne
		bne		delay_loop					@ переход, если Z!=0 (результат вычитания не равен нулю)
 80004da:	e7fc      	bne.n	80004d6 <delay_loop>
		pop		{r2}						@ Выгружаем из стека R0
 80004dc:	bc04      	pop	{r2}
		bx		lr							@ выход из подпрограммы (переход к адресу в регистре LR - вершина стека)
 80004de:	4770      	bx	lr
  ldr   r0, =_estack
 80004e0:	20005000 	.word	0x20005000
  ldr	r2, =PERIPH_BB_BASE+ \
 80004e4:	42420310 	.word	0x42420310
  ldr	r2, =GPIOC_CRL	@ адрес порта
 80004e8:	40011000 	.word	0x40011000
  ldr	r2, =GPIOC_CRH	@ адрес порта
 80004ec:	40011004 	.word	0x40011004
  ldr	r2, =GPIOC_BSRR
 80004f0:	40011010 	.word	0x40011010
  		ldr 	r0, =(PERIPH_BB_BASE + (GPIOC_IDR - PERIPH_BASE) * 32 + 13 * 4)
 80004f4:	42220134 	.word	0x42220134

080004f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC1_2_IRQHandler>
	...

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr
